package edu.wm.cs.cs301.ColinWeinshenkerMarissaMessner.falstad;

import android.content.Context;
import android.graphics.Canvas;
import android.util.AttributeSet;

//import java.awt.Font;
//import java.awt.FontMetrics;
//import java.awt.Graphics;
//import java.awt.Color;

import android.view.View;

public class GraphicsWrapper extends View {

//	Graphics gc;
//	Font largeBannerFont = new Font("TimesRoman", Font.BOLD, 48);
//	Font smallBannerFont = new Font("TimesRoman", Font.BOLD, 16);
	
	public GraphicsWrapper(Context context, AttributeSet attrs) {
		super(context, attrs);
	}
	
	
	public void onDraw(Canvas canvas){
		super.onDraw(canvas);
	}
	
	
	public void drawLine(int x1, int y1, int x2, int y2){
		//gc.drawLine(x1, y1, x2, y2);
	}
	
	public void newGraphics(){
		//gc = getBufferGraphics();
	}
	
	
	/**
	 * Set the Graphics object's color.
	 * @param color the name of the color
	 */
	public void setColor (String color){
//		switch(color){
//		case "white":
//			gc.setColor(Color.white);
//			break;
//		case "black":
//			gc.setColor(Color.black);
//			break;
//		case "red":
//			gc.setColor(Color.red);
//			break;
//		case "orange":
//			gc.setColor(Color.orange);
//			break;
//		case "yellow":
//			gc.setColor(Color.yellow);
//			break;
//		case "blue":
//			gc.setColor(Color.blue);
//			break;
//		case "gray":
//			gc.setColor(Color.gray);
//			break;
//		case "dark gray":
//			gc.setColor(Color.darkGray);
//		}
	}
	
	public void setColor(int[] colorArray){
//		Color color = new Color(colorArray[0], colorArray[1], colorArray[2]);
//		gc.setColor(color);
	}
	
	public static int getRGB(int[] colorArray){
//		Color color = new Color(colorArray[0], colorArray[1], colorArray[2]);
//		return color.getRGB();
	return 0;
	}
	
	
	/**
	 * Set the Graphics object's font.
	 * @param fontName the name of the font
	 */
	public void setFont(String fontName) {
//		switch(fontName) {
//		case "large":
//			gc.setFont(largeBannerFont);
//			break;
//		case "small":
//			gc.setFont(smallBannerFont);
//			break;
//		}
	}
	
	/**
	 * Make a rectangle in the Graphics object.
	 * @param x the x value of the top left corner
	 * @param y the y value of the top left corner
	 * @param width the width
	 * @param height the height
	 */
	public void fillRect(int x, int y, int width, int height) {
		//gc.fillRect(x, y, width, height);
	}
	
	/**
	 * Calls the Graphics' objects fillPolygon method
	 * @param xps -- array of x coordinates
	 * @param yps -- array of y coordinates
	 * @param npoints -- the total number of points
	 */
	public void fillPolygon(int[] xps, int[] yps, int npoints){
		//gc.fillPolygon(xps, yps, npoints);
	}
	
	/**
	 * Draw a string on the Graphics object.
	 * @param str the string
	 * @param x the x position
	 * @param y the y position
	 */
	public void drawString(String str, int x, int y) {
		//gc.drawString(str, x, y);
	}
	
	public void centerString(GraphicsWrapper wrapper, String str, int ypos) {
//		FontMetrics fm = gc.getFontMetrics();
//		wrapper.drawString(str, (Constants.VIEW_WIDTH-fm.stringWidth(str))/2, ypos);
	}
	
	public void fillOval(int x, int y, int width, int height){
		//gc.fillOval(x, y, width, height);
	}
	
}
