package edu.wm.cs.cs301.ColinWeinshenkerMarissaMessner.ui;

import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.Toolbar;
import android.util.Log;
import android.content.Intent;
import android.os.Bundle;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.ProgressBar;
import android.widget.Toast;
import edu.wm.cs.cs301.ColinWeinshenkerMarissaMessner.falstad.GraphicsWrapper;

/**
 * This class supports functionality for the play state of the maze
 * The class should handle user input on two different toolbars
 * The first toolbar allows the user to toggle the mazeview options
 * The second toolbar (footer) allows the user to drive the robot in manual mode
 * If not in manual mode, the second toolbar simply has a pause button to stop a robot
 * There should also be two buttons to move to the finish activity in success and failure states, respectively
 * @author cweinshenker 
 * @author mamessner
 */
public class PlayActivity extends AppCompatActivity{
	
	private GraphicsWrapper tupac;
	private Toolbar mainToolbar;
	private Toolbar arrowBar;
	private ProgressBar batteryBar;
	private String driver;
	private boolean showSolution;
	private boolean showWalls;
	private boolean showMaze;
	private float batteryLevel;
	private int pathLength;
	private boolean foundExit;


	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_play);
		Intent intent = getIntent();
		driver = intent.getStringExtra("driver");
		showSolution = intent.getBooleanExtra("showSolution", false);
		showWalls = intent.getBooleanExtra("showWalls", false);
		showMaze = intent.getBooleanExtra("showMaze", false);
		setUpToolbars();
		tupac = (GraphicsWrapper) findViewById(R.id.graphicsWrapper);
		tupac.drawLine(0, 0, tupac.getMeasuredWidth(), tupac.getMeasuredHeight());
		batteryBar = (ProgressBar) findViewById(R.id.batteryLevelBar);
		batteryBar.setProgress(batteryBar.getMax());
		Log.v("driver: ", driver);
		if (driver.equals("Manual")){
			arrowBar.inflateMenu(R.menu.arrowkey);
		}
		else{
			arrowBar.inflateMenu(R.menu.pause);
		}
	}

	/**
	 * Inflate the menu; this adds items to the action bar if it is present.
	 * @param menu -- the menu of options
	 */
	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		getMenuInflater().inflate(R.menu.play, menu);
		return true;
	}

	/**
	 * Handle action bar item clicks here.
	 * This action bar lets the user toggle the maze outline, walls, and shown solution
	 * @param item -- the selected item
	 */
	@Override
	public boolean onOptionsItemSelected(MenuItem item) {

		int id = item.getItemId();
		switch(id){
		case R.id.action_settings:
			Log.v("Settings button", "clicked");
			Toast.makeText(getApplicationContext(), "Selected settings", Toast.LENGTH_SHORT).show();
			return true;
		case R.id.showmaze:
			Log.v("Top-down button", "clicked");
			Toast.makeText(getApplicationContext(), "Toggled top-down view", Toast.LENGTH_SHORT).show();
			return true;
		case R.id.solution:
			Log.v("Show solution button", "clicked");
			Toast.makeText(getApplicationContext(), "Toggled solution", Toast.LENGTH_SHORT).show();
			return true;
		case R.id.walls:
			Log.v("Show walls button", "clicked");
			Toast.makeText(getApplicationContext(), "Toggled walls", Toast.LENGTH_SHORT).show();
			return true;
		default:
			return super.onOptionsItemSelected(item);
		}
	}

	/**
	 * Move to the finish screen with a success condition
	 * Pass on the battery level, path length, and finish condition in the intent
	 * @param view
	 */
	public void toFinishSuccess(View view){
		Log.v("Finished maze", "Moving to finish screen");
		Toast.makeText(getApplicationContext(), "Finished maze", Toast.LENGTH_SHORT).show();
		Intent intent = new Intent(this, FinishActivity.class);
		intent.putExtra("batteryLevel", batteryLevel);
		intent.putExtra("pathLength", pathLength);
		intent.putExtra("foundExit", true);
		startActivity(intent);
	}

	/**
	 * Move to the finish screen with a failure condition
	 * Pass on the battery level, path length, and finish condition in the intent
	 * @param view
	 */
	public void toFinishFailure(View view){
		Log.v("Failed maze", "Moving to finish screen");
		Toast.makeText(getApplicationContext(), "Failed maze", Toast.LENGTH_SHORT).show();
		Intent intent = new Intent(this, FinishActivity.class);
		intent.putExtra("batteryLevel", batteryLevel);
		intent.putExtra("pathLength", pathLength);
		intent.putExtra("foundExit", false);
		startActivity(intent);
	}

	/**
	 * Return to the title screen if the back button is pressed
	 */
	@Override
	public void onBackPressed(){
		Intent intent = new Intent(this, AMazeActivity.class);
		startActivity(intent);
	}

	/**
	 * Assign the main toolbar its action listener
	 * Respond to the arrow key presses and the pause button 
	 */
	public void setUpToolbars() {
		mainToolbar = (Toolbar) findViewById(R.id.toolbar1);
		mainToolbar.setTitle("");
		setSupportActionBar(mainToolbar);
		getSupportActionBar().setDisplayShowTitleEnabled(false);
		arrowBar = (Toolbar) findViewById(R.id.toolbar2);
		arrowBar.setOnMenuItemClickListener(new Toolbar.OnMenuItemClickListener() {
			@Override
			public boolean onMenuItemClick(MenuItem item) {
				switch(item.getItemId()){
				case R.id.forward:
					Log.v("Move: ", "forward");
					Toast.makeText(getApplicationContext(), "Moving forward", Toast.LENGTH_SHORT).show();
					return true;
				case R.id.backward:
					Log.v("Move: ", "back");
					Toast.makeText(getApplicationContext(), "Moving backward", Toast.LENGTH_SHORT).show();
					return true;
				case R.id.left:
					Log.v("Turn: ", "left");
					Toast.makeText(getApplicationContext(), "Turning left", Toast.LENGTH_SHORT).show();
					return true;
				case R.id.right:
					Log.v("Turn: ", "right");
					Toast.makeText(getApplicationContext(), "Turning right", Toast.LENGTH_SHORT).show();
					return true;
				case R.id.pause:
					Log.v("Pause: ", "paused");
					Toast.makeText(getApplicationContext(), "Pausing/unpausing", Toast.LENGTH_SHORT).show();
					return true;
				}
				return false;
			}
		});
	}
}
